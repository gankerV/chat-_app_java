package chat_system;

import swing.txtUser;
import chat_system.dao.UserAccountDAO;
import chat_system.dto.User;

public class Request_and_Report extends javax.swing.JPanel {
    private final String currentUserID;  // ID của người dùng hiện tại
    private final User selectedUser;     // Thống tin người dùng bằn cần xóa quan hệ

    public Request_and_Report( String currentUserID, User selectedUser) {
        initComponents();

        this.currentUserID = currentUserID;  // Lưu lại currentUserID
        this.selectedUser = selectedUser;    // Lưu lại selectedUser

        txtUsername.setText("Username: " + selectedUser.getUsername());
        txtEmail.setText("Email: " + selectedUser.getEmail());
    }

    public void register() {
        txtUser.grabFocus();
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtUsername = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addFriend_Button = new swing.MyButton();
        txtEmail = new javax.swing.JLabel();
        block_Button = new swing.MyButton();

        setBackground(new java.awt.Color(255, 255, 255));

        txtUsername.setText("User Name");

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(69, 68, 68));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Not Friend");

        addFriend_Button.setBackground(new java.awt.Color(255, 0, 0));
        addFriend_Button.setForeground(new java.awt.Color(40, 40, 40));
        addFriend_Button.setText("Add friend");
        addFriend_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriend_ButtonActionPerformed(evt);
            }
        });

        txtEmail.setText("Email");

        block_Button.setBackground(new java.awt.Color(0, 0, 0));
        block_Button.setForeground(new java.awt.Color(255, 255, 255));
        block_Button.setText("Block");
        block_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                block_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEmail)
                    .addComponent(txtUsername)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(addFriend_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(block_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addFriend_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(block_Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFriend_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriend_ButtonActionPerformed
        // TODO add your handling code here:
        // Hiển thị thông báo xác nhận
        int confirm = javax.swing.JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to send a friend request to " + selectedUser.getUsername() + "?", 
        "Confirm Friend Request", 
        javax.swing.JOptionPane.YES_NO_OPTION);

        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            try {
                UserAccountDAO userDao = new UserAccountDAO();
                boolean success = userDao.sendFriendRequest(Integer.parseInt(this.currentUserID), this.selectedUser.getId());

                if (success) {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Friend request sent successfully to " + selectedUser.getUsername() + "!", 
                            "Success", 
                            javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    // Cập nhật trạng thái giao diện nếu cần (ví dụ: disable nút Add Friend)
                    addFriend_Button.setEnabled(false);
                    jLabel2.setText("Request Sent");
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, 
                            "Failed to send friend request. Bạn đã bị Unfriend hoặc bị Rejected hoặc đang có Request chờ đồng ý.", 
                            "Error", 
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, 
                        "An error occurred: " + e.getMessage(), 
                        "Error", 
                        javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addFriend_ButtonActionPerformed

    private void block_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_block_ButtonActionPerformed
        // TODO add your handling code here:
        int blockId = this.selectedUser.getId(); // ID của người bị chặn
        int userId = Integer.parseInt(this.currentUserID);    // ID của người thực hiện chặn

        int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                "Are you sure you want to block " + selectedUser.getUsername() + "?",
                "Confirm Block", javax.swing.JOptionPane.YES_NO_OPTION);

        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
            try {
                UserAccountDAO userDao = new UserAccountDAO();
                boolean alreadyBlocked = userDao.isBlockedUser(userId, blockId);

                if (alreadyBlocked) {
                    javax.swing.JOptionPane.showMessageDialog(this,
                            "You have already blocked this user.",
                            "Already Blocked", javax.swing.JOptionPane.WARNING_MESSAGE);
                } else {
                    boolean success = userDao.blockUser(userId, blockId);

                    if (success) {
                        javax.swing.JOptionPane.showMessageDialog(this,
                                "User has been successfully blocked.",
                                "Blocked", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        block_Button.setEnabled(false); // Disable block button after blocking
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this,
                                "Failed to block the user. Please try again.",
                                "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this,
                        "An error occurred: " + e.getMessage(),
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_block_ButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.MyButton addFriend_Button;
    private swing.MyButton block_Button;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel txtEmail;
    private javax.swing.JLabel txtUsername;
    // End of variables declaration//GEN-END:variables
}
